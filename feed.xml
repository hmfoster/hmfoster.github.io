<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hailey Foster</title>
    <description>A teacher&#39;s perspective on programming.</description>
    <link>http://hmfoster.github.io/</link>
    <atom:link href="http://hmfoster.github.io//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Wrapping your Brain Around JavaScript&#39;s Bind Method</title>
        <description>&lt;p&gt;I think everyone can agree that fully understanding JavaScript&amp;#39;s keyword &lt;code&gt;this&lt;/code&gt; is...challenging. The object to which it refers changes depending upon the context in which it is called. Fortunately, you can use JavaScript&amp;#39;s native &lt;code&gt;bind&lt;/code&gt; method to take control of matters. The code below demonstrates both the &lt;em&gt;need&lt;/em&gt; for the &lt;code&gt;bind&lt;/code&gt; method and works up to explain how exactly it work. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c1&quot;&gt;//Make a new object and a related(ish) function&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appetite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hungry&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feedCat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appetite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;full&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c1&quot;&gt;//attempt to call the method on the object&lt;/span&gt;
&lt;a name=&quot;True-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;feedCat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This doesn&amp;#39;t work, because &lt;code&gt;feedCat&lt;/code&gt; isn&amp;#39;t a property of the cat object. Similarly, &lt;code&gt;feedCat(cat)&lt;/code&gt; won&amp;#39;t work, because the &lt;code&gt;this&lt;/code&gt; inside of &lt;code&gt;feedCat&lt;/code&gt; will be bound to &lt;code&gt;window&lt;/code&gt;. However, we can use JavaScript&amp;#39;s &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; methods to manually bind &lt;code&gt;this&lt;/code&gt; to the &lt;code&gt;cat&lt;/code&gt; object:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;feedCat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, if we try to use a browser method, such as &lt;code&gt;setTimout&lt;/code&gt;, funny things start to happen:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;feedCat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code above doesn&amp;#39;t work, because the feedCat function is invoked &lt;em&gt;immediately&lt;/em&gt; and doesn&amp;#39;t return a function to be invoked later. So &lt;code&gt;setTimeout&lt;/code&gt; is essentially trying to call &lt;code&gt;undefined&lt;/code&gt;, not a function. &lt;/p&gt;

&lt;p&gt;It is tempting imagine that any easy fix might be simply adding the &lt;code&gt;feedCat&lt;/code&gt; function as a property of &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;feedCat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feedcat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, &lt;code&gt;setTimeout(cat.feedcat, 1000)&lt;/code&gt; &lt;strong&gt;&lt;em&gt;still won&amp;#39;t work&lt;/em&gt;&lt;/strong&gt; because  &lt;code&gt;setTimeout&lt;/code&gt; belongs to the &lt;code&gt;window&lt;/code&gt; object, so when we call functions with it, &lt;code&gt;this&lt;/code&gt; automatically binds to the &lt;code&gt;window&lt;/code&gt; object (or other global object)!
One of my Hack Reactor peers wrote up a more detailed explanation of that problem &lt;a href=&quot;http://lukesavage.me/jekyll/2015/07/08/setTimeout-and-this/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We must use a wrapper function instead:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;feedCat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The wrapper function doesn&amp;#39;t get called until later, can because &lt;code&gt;feedCat.call(cat)&lt;/code&gt; is &lt;em&gt;inside&lt;/em&gt; of the wrapper function, it doesn&amp;#39;t get called until that function is called. &lt;/p&gt;

&lt;p&gt;So now, let&amp;#39;s imagine that instead of using an anonymous wrapper function, we have a function called &lt;code&gt;bind&lt;/code&gt; that does essentially the same thing. It&amp;#39;s code would need to look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that the first parameter is the function we &lt;em&gt;really&lt;/em&gt; want to call, and the second parameter is the object to which we want to bind &lt;code&gt;this&lt;/code&gt;; any additional parameters could be passed to the interior function.&lt;/p&gt;

&lt;p&gt;We could then run this code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;feedCat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that&amp;#39;s basically all the &lt;code&gt;bind&lt;/code&gt; function does. It essentially cements the keyword &lt;code&gt;this&lt;/code&gt; to whatever you want it to be. Instead of a rewriting &lt;code&gt;bind&lt;/code&gt; everytime we want to use it with a different function, JavaScript has attached it as a method to the Function prototype. Because all functions delegate here, all functions have access to bind, so we would actually call it like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;feedCat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The real source code looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; 
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using &lt;code&gt;apply&lt;/code&gt; instead of &lt;code&gt;call&lt;/code&gt; accounts for slightly more complicated situations in which many parameters must be passed in to the interior function. It also uses &lt;code&gt;returns&lt;/code&gt; to account for the fact that most functions will need to return something, and not just implement a side effect like in ouf &lt;code&gt;feedCat&lt;/code&gt; function.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jul 2015 00:00:00 -0700</pubDate>
        <link>http://hmfoster.github.io//Understanding-Bind/</link>
        <guid isPermaLink="true">http://hmfoster.github.io//Understanding-Bind/</guid>
      </item>
    
      <item>
        <title>Deciphering Javascript Instantiation Patterns</title>
        <description>&lt;p&gt;Sometimes it seems like Javascript has about a hundred different options for doing just about anything. While this flexibility can be powerful, it can also lead to confusion as it is sometimes unclear that several different constructs all essentially do the same thing. For example, Javascript has a variety of 
&lt;span style = &quot;cursos:help;&quot; title = &quot;a technique for encapsulating and modularizing object creation&quot;&gt;instantiation patterns&lt;/span&gt;, which can also be considered strategies for creating new classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functional&lt;/li&gt;
&lt;li&gt;Functional Shared&lt;/li&gt;
&lt;li&gt;Prototypical&lt;/li&gt;
&lt;li&gt;Pseudoclassical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Much has been written about these four styles already&amp;mdash;check out the posts by &lt;a href=&quot;http://tylermcginnis.com/object-creation-in-javascript-functional-instantiation-vs-prototypal-instantiation-vs-pseudo-classical-instantiation/&quot;&gt;Tyler McGinnis&lt;/a&gt; and &lt;a href=&quot;http://blog.lyyons.com/javascript-instantiation-patterns-and-why-you-need-to-know-them/&quot;&gt;Ian Lynon&lt;/a&gt; for a couple of particularly clear explanations. Here, I want to briefly compare and contrast the basic structure of each pattern for use as a quick reference and/or refresher for people who already know how and when to use each pattern.&lt;/p&gt;

&lt;p&gt;All four patterns accomplish the same three objectives:
1. Declare a new object (outlined in orange)
2. Add properties common to all members of the class (also in orange)
3. Add methods common to all members of the class (outlined in green)&lt;/p&gt;

&lt;p&gt;Below each function, I have also shown how each pattern is called upon to create new objects. Notice that functional, functional shared, and prototypical all use the same general code here, but the pseudoclassical pattern uses the keyword &lt;code&gt;new&lt;/code&gt;. Additionally, the functional shared code here uses &lt;a href=&quot;file:///Users/haileyfoster/Library/Application%20Support/Dash/DocSets/UnderscoreJS/UnderscoreJS.docset/Contents/Resources/Documents/index.html#extend&quot;&gt;Underscore&amp;#39;s &lt;code&gt;_.extend&lt;/code&gt; function&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;Pattern&lt;/th&gt;
        &lt;th&gt;General Structure&lt;/th&gt;
        &lt;th&gt;Example Code&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Functional&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Functional.png&quot;&gt; &lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Functional-ex.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Functional Shared&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Functional-Shared.png&quot;&gt; &lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Functional Shared-ex.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Prototypal&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Prototypal.png&quot;&gt; &lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Prototypal-ex.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Pseudoclassical&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Pseudoclassical.png&quot;&gt; &lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Pseudoclassical-ex.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;

&lt;/table&gt;

&lt;p&gt;Again, each of these patterns are useful in different circumstances. In addition to the posts by &lt;a href=&quot;http://tylermcginnis.com/object-creation-in-javascript-functional-instantiation-vs-prototypal-instantiation-vs-pseudo-classical-instantiation/&quot;&gt;Tyler McGinnis&lt;/a&gt; and &lt;a href=&quot;http://blog.lyyons.com/javascript-instantiation-patterns-and-why-you-need-to-know-them/&quot;&gt;Ian Lynon&lt;/a&gt;, &lt;a href=&quot;http://www.hackreactor.com/blog/javascript-instantiation-patterns&quot;&gt;Brett Hoyer&lt;/a&gt; presents the advantages and disadvantages of each pattern quite clearly on Hack Reactor&amp;#39;s blog.&lt;/p&gt;

&lt;p&gt;In addition to the instantiation patterns shown above, Javascript allows for the use of &lt;strong&gt;function decorators&lt;/strong&gt;. While these do not instantiate new objects, they are useful for modifying the properties and methods of existing objects. They &lt;em&gt;can&lt;/em&gt; also be used to instantiate a new object if an empty object is passed in as one of the arguments, but this is far less efficient that using any of the class declaration patterns above. &lt;/p&gt;

&lt;p&gt;There are two decorator patterns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functional Object Decorator with Duplicate Methods&lt;/li&gt;
&lt;li&gt;Functional Object Decorator with Shared Methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two patterns look almost identical to the functional and functional shared patterns above, and have similar pros and cons. However, unlike the instantiation patterns, these must have an object passed in as one of their arguments.&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;Pattern&lt;/th&gt;
        &lt;th&gt;General Structure&lt;/th&gt;
        &lt;th&gt;Example Code&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Decorator with Duplicate Methods&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Decorator-Duplicate.png&quot;&gt; &lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Decorator-Duplicate-ex.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Decorator with Shared Methods&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Decorator-Shared.png&quot;&gt; &lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;../images/Instatiation/Decorator-Shared-ex.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Much more can be said about all of these patterns &amp;mdash; why some use &lt;code&gt;this&lt;/code&gt;and/or &lt;code&gt;new&lt;/code&gt;, which are more efficient etc...&amp;mdash; but I hope this is enough to help clarify the structure of each pattern, and to use as a quick reference for those who are already familiar with them.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jul 2015 00:00:00 -0700</pubDate>
        <link>http://hmfoster.github.io//Deciphering-Javascript-Instantiation-Patterns/</link>
        <guid isPermaLink="true">http://hmfoster.github.io//Deciphering-Javascript-Instantiation-Patterns/</guid>
      </item>
    
      <item>
        <title>And So It Begins</title>
        <description>&lt;p&gt;Alright Freetime, it was fun, but we officially have to have to say our goodbyes for now. I had a great time with you over the last two weeks; we had some epic walks through Portland, ate a few fantastic meals, caught up with friends, and just lolly-gagged in general. However, I started Hack Reactor a few days ago, and it&amp;#39;s really time to let go.&lt;/p&gt;

&lt;p&gt;Hack Reactor is a tough program to get into; before beginning, I definitely tried to do everything I could to feel prepared going into it. At the same time, I also didn&amp;#39;t want to &amp;quot;burn out&amp;quot; before even starting, so I took a step back from programming the week before it started. During this time, our cohort made a Slack channel so we could get to know each other and discuss the precourse work. I continued to monitor our channel even while taking a break from everything else and started to notice just how advanced some of my classmates were going to be. Even if I&amp;#39;d wanted to, I couldn&amp;#39;t really engage with many of their conversations, because I had no idea what they were talking about. So, I lurked and tried to soak up as much as possible, while trying to tell myself that it didn&amp;#39;t matter, and Hack Reactor wouldn&amp;#39;t have accepted me if it did. &lt;/p&gt;

&lt;p&gt;Of course, all of this still made me a bit anxious, because I didn&amp;#39;t want to be behind before I&amp;#39;d even begun! The more I thought about it, however, the more I realized that my lack of understanding was primarily due to a language barrier. Yes, I am a native English speaker, but there is a huge amount of jargon present in computer science to which I just have not yet been exposed. In teacher terms, these words are referred to as &amp;quot;Tier 3&amp;quot;--they are low frequency, and context specific. Research also shows that the average human brain is only capable of deeply learning about seven new &amp;quot;chunks&amp;quot; of information at a time. This is a surprisingly small amount of information, so it means that I&amp;#39;ll need to be careful to only focus on the vetted concepts given in the curriculum. I therefore have decided it&amp;#39;s best not to worry about all of the random terms being thrown out by my classmates until Hack Reactor decides they are relevant. &lt;/p&gt;

&lt;p&gt;This does not mean that these discussions haven&amp;#39;t been making me nervous! On top of that, the first few of days with Hack Reactor have been packed with activity. In addition to reviewing the precourse material, we have also been practicing our skills with git, learning how to use floobits, and working to collaborate effectively with our partners. We also had our first timed self-assessment. It was intense, and I think almost all of us were mentally and emotionally exhausted afterward. Fortunately, Hack Reactor does a fantastic job of allaying fears of failure by using the first few days to instill healthy learning attitudes. Honestly, I wish I could have shown some of their lectures to &lt;em&gt;my&lt;/em&gt; students when I was still teaching!&lt;/p&gt;

&lt;p&gt;It is clear that the next few months will be far from easy, and I definitely will not be &amp;quot;at the top of the class.&amp;quot; That&amp;#39;s fine though! I ready to be challenged and am actually looking forward to the struggle. I just have to remember that in the end, the feeling of accomplishment will be that much sweeter. &lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2015 00:00:00 -0700</pubDate>
        <link>http://hmfoster.github.io//And-So-It-Begins/</link>
        <guid isPermaLink="true">http://hmfoster.github.io//And-So-It-Begins/</guid>
      </item>
    
      <item>
        <title>The End of Year Hustle</title>
        <description>&lt;p&gt;I am so glad I decided to power through as much of the precourse work for Hack Reactor as possible when I first got it, because the last couple of weeks have been so packed with other things that I&amp;#39;ve barely had a chance to glance back at any of it. Today was my last &amp;quot;normal&amp;quot; teaching day; finals start tomorrow, and next Thursday is the last day of school. &lt;/p&gt;

&lt;p&gt;Each year I have taught, I&amp;#39;ve tried to tweak this part of the year to make it flow better, but the kids (I call them kids--they&amp;#39;re all at least 16) and I are all so ready for the end that it never quite works out like I&amp;#39;d like. This year I had my chemistry students complete a final project in place of a traditional final. They had three weeks to work on it, including about 5 class periods to plan, research, and ask questions. As one would expect, some of the kids took advantage of this time, and others procrastinated as much as they could. Consequently, some of their presentations were vastly more entertaining than others; guess which ones I enjoyed grading more! &lt;/p&gt;

&lt;p&gt;Because cheating is so prevalent among our students, I also changed up the precalculus final this year. It is completely open note and students have access to their calculator for the entire exam if they&amp;#39;d like. However, none of the questions involve calculations. I figure that I&amp;#39;ve seen enough of their basic skills during the year, so instead I&amp;#39;m asking a variety of critical thinking questions. For example, several of the problems involve error analysis, one asks students to decide which method of proving a trigonometric identity is &amp;quot;better&amp;quot;, and one just asks them to &amp;quot;tell me everything [they] know about conic sections.&amp;quot; I&amp;#39;m also having students write and solve three of their own problems, and to justify what grade they believe they have earned in my class. Because all of these problems have more than one &amp;quot;right&amp;quot; answer, I&amp;#39;m hoping that it will be virtually cheat-proof. &lt;/p&gt;

&lt;p&gt;Because I&amp;#39;ve almost finished grading the chemistry projects, I only have a few more school related tasks left this year (grading finals, updating the inventory, clearing out &lt;em&gt;my&lt;/em&gt; stuff). I should have more time to refocus on programming within the next couple of days, and they it will be clear sailing until June 29th! &lt;/p&gt;
</description>
        <pubDate>Thu, 04 Jun 2015 00:00:00 -0700</pubDate>
        <link>http://hmfoster.github.io//End-of-Year-Hustle/</link>
        <guid isPermaLink="true">http://hmfoster.github.io//End-of-Year-Hustle/</guid>
      </item>
    
      <item>
        <title>The Importance of Clear Communication</title>
        <description>&lt;p&gt;A couple of weeks ago, I was working on two pieces of Javascript code that would apply a test to each item in array. The function &lt;code&gt;every&lt;/code&gt; would return &lt;code&gt;true&lt;/code&gt; if all items in the collection passed the test, while the function &lt;code&gt;some&lt;/code&gt; would return true if one or more of the items passed the test. Writing &lt;code&gt;every&lt;/code&gt; was fairly straightforward using Javascript&amp;#39;s &lt;code&gt;reduce&lt;/code&gt; function, but because I was trying to use my &lt;code&gt;every&lt;/code&gt; function in the &lt;code&gt;some&lt;/code&gt; function to practice functional programming, it took me a while longer to write &lt;code&gt;some&lt;/code&gt;. Worse yet, because both functions deal with many boolean values, they are a bit difficult to discuss. The first time I tried to explain my final version of the &lt;code&gt;some&lt;/code&gt; function to one of my students, it just ended up sounding like gibberish; it sounded something like, &amp;quot;...so if every value is not false, not every returns true, so some is true.&amp;quot; Fortunately the students with whom I was talking is quite bright, so once I showed her how the function worked with an example. &lt;/p&gt;

&lt;p&gt;Since I did such a paltry job the first time I tried to explain &lt;code&gt;some&lt;/code&gt;, I&amp;#39;ve decided to try again here. As all teachers know, if you can&amp;#39;t teach it, you don&amp;#39;t really understand it. So, instead of simply providing my solution, here I&amp;#39;m going to try to explain it using pseudocode. &lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;What the code &lt;em&gt;should&lt;/em&gt; do:&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;every(collection, test)&lt;/code&gt;: Uses javascript&amp;#39;s &lt;code&gt;reduce&lt;/code&gt; function to apply a test to each item, and  returns true if all items in the collection pass the test. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;some(collection, test)&lt;/code&gt;: Uses &lt;code&gt;every&lt;/code&gt; returns true if at least one item passes the test.&lt;/p&gt;

&lt;h4&gt;The Logic:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;every&lt;/code&gt; to determine if all of the items &lt;strong&gt;fail&lt;/strong&gt; the test passed into &lt;code&gt;some&lt;/code&gt;. 
This means that this &lt;code&gt;every&lt;/code&gt; needs to test for the &lt;strong&gt;opposite&lt;/strong&gt; of the &lt;code&gt;some&lt;/code&gt; test.

&lt;ul&gt;
&lt;li&gt;If this &lt;code&gt;every&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, &lt;strong&gt;none&lt;/strong&gt; of the items passed the test given to &lt;code&gt;some&lt;/code&gt;, so &lt;code&gt;some&lt;/code&gt; should return &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If this &lt;code&gt;every&lt;/code&gt; returns false, &lt;strong&gt;at least one&lt;/strong&gt; item passed the test given to &lt;code&gt;some&lt;/code&gt;, so &lt;code&gt;some&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Example&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collection1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collection2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c1&quot;&gt;//Return true if the item is odd.&lt;/span&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;a name=&quot;True-6&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;True-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;True-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;some&lt;/code&gt; passes &lt;code&gt;collection1&lt;/code&gt; and &lt;code&gt;isOdd&lt;/code&gt; to &lt;code&gt;every&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;every&lt;/code&gt; tests to see if &lt;strong&gt;all&lt;/strong&gt; of the items are not odd (&lt;code&gt;!isOdd&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;All of the items in &lt;code&gt;collection1&lt;/code&gt; are not odd, so &lt;code&gt;every&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;every&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;some&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;: &lt;em&gt;none&lt;/em&gt; of the items in &lt;code&gt;collection1&lt;/code&gt; are odd.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;some&lt;/code&gt; passes &lt;code&gt;collection2&lt;/code&gt; and &lt;code&gt;isOdd&lt;/code&gt; to &lt;code&gt;every&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;every&lt;/code&gt; tests to see if &lt;strong&gt;all&lt;/strong&gt; of the items are not odd (&lt;code&gt;!isOdd&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Because &lt;code&gt;collection2[1]&lt;/code&gt; &lt;strong&gt;is&lt;/strong&gt; odd, &lt;code&gt;every&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Therefore, at least one item passes the &lt;code&gt;isOdd&lt;/code&gt; test, so &lt;code&gt;some&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;p&gt;Whew! Let me know if this does (or doesn&amp;#39;t!) make sense, and if you have any suggestions for how to improve it!&lt;/p&gt;
</description>
        <pubDate>Sun, 24 May 2015 00:00:00 -0700</pubDate>
        <link>http://hmfoster.github.io//The-Importance-of-Clear-Communication/</link>
        <guid isPermaLink="true">http://hmfoster.github.io//The-Importance-of-Clear-Communication/</guid>
      </item>
    
      <item>
        <title>The Elusive Zone of Proximal Development</title>
        <description>&lt;p&gt;Whoops! Though it doesn&amp;#39;t feel like long, upon outlining what I want to write about, I&amp;#39;ve realized that too much time has passed since my last post. Hack Reactor&amp;#39;s precourse work touches upon many different subjects, so in just a few days, I&amp;#39;ve worked through a ton of material! I&amp;#39;ll try not to make that mistake again; I think it will be best if I try to write every other day.&lt;/p&gt;

&lt;p&gt;After finishing up the &lt;code&gt;_.memoize&lt;/code&gt; function last week (which was much easier once I realized I should use an object to store past function results, and that I could use &lt;code&gt;.map&lt;/code&gt; on function arguments), I took a couple of days off to attend to other work and to spend some time with the fam. I only had two more functions left in this task at that point, and got through them relatively quickly. I still am not entirely sure why one would use &lt;code&gt;_.delay&lt;/code&gt; instead of Javascript&amp;#39;s regular &lt;code&gt;setInterval()&lt;/code&gt; function, as they both take the same number of parameters. Doesn&amp;#39;t seem any more convenient to me. Finally, while working through &lt;code&gt;_.shuffle&lt;/code&gt;, I was forced to recognize the difference between slicing and splicing--up to this point, I hadn&amp;#39;t realized these were two different methods. Other than that, I found these last two functions to be pretty easy.&lt;/p&gt;

&lt;p&gt;The second half of this section of work primarily involves front-end development. I had already worked through the CSS tutorial listed in the syllabus and so I skipped these videos, but I still found it valuable to work through the practice problems again to review all of the important concepts. I had also started the given JQuery tutorial, but for some reason JQuery just doesn&amp;#39;t &amp;quot;stick&amp;quot; with me, so I started this tutorial over from the beginning. The syllabus says that it should take you 1-2 hours to finish this tutorial, but this was not true for me! I&amp;#39;d say it took me at least 3 hours to finish the whole thing, even though I felt that I was working at a decently quick pace--none of the practice problems took me long to finish, and the videos are not long.&lt;/p&gt;

&lt;p&gt;To be honest, I didn&amp;#39;t find the JQuery tutorial to be that helpful. The videos had clear explanations, but CodeSchool&amp;#39;s practice problems just don&amp;#39;t help me learn to apply new material that well. They are always too basic, so I just feel like I&amp;#39;m copy/pasting answers from the video examples and am never required to think through the code. Consequently, I don&amp;#39;t feel like I &lt;strong&gt;really&lt;/strong&gt; understand JQuery functions that well. I&amp;#39;m sure this will change as I write more and more code, but it is frustrating for now. &lt;/p&gt;

&lt;p&gt;There was a Soviet psychologist by the name of &lt;a href=&quot;http://en.wikipedia.org/wiki/Lev_Vygotsky&quot;&gt;Lev Vygotsky&lt;/a&gt; who proposed a concept called the &lt;strong&gt;&lt;a href=&quot;http://www.toolsofthemind.org/philosophy/scaffolding/&quot;&gt;Zone of Proximal Development&lt;/a&gt;&lt;/strong&gt;. Vygotsky posited that the most successful learning happens in the &amp;quot;zone&amp;quot; between what the learner can do independently, and what they can do with support. New material is &amp;quot;too easy&amp;quot; when it is something the learner already understands and can do independently; it is not worth the learner&amp;#39;s time to continue working on it. On the other had, if the new material is so difficult the learner cannot comprehend it even with support, they become frustrated and tend to give up. This idea resonated deeply with me when I first studied it while completing my Master&amp;#39;s in Education. At the time, I was thinking about the theory from the perspective of a teacher, and saw how well it fit my experiences with my students. Now that I&amp;#39;m back to being a student myself, I see again how important it is to find that sweet spot, the ZPD. &lt;/p&gt;

&lt;p&gt;I began working on the Twittler project earlier this week, and because using JQuery without assistance is just a little beyond me right now, it&amp;#39;s been....slow going. At first, I couldn&amp;#39;t get my HTML to show up because the JQuery code was clearing the HTML. Once I got that straightened out, I had to figure out how to use JQuery to implement my HTML, which was not something I&amp;#39;d ever seen done before. Next, I realized I had no idea how to access Javascript data from a different file using JQuery &lt;small&gt;(side note: I was overthinking this)&lt;/small&gt;. Fortunately, my classmates are generous with their knowledge, so they&amp;#39;ve been able to provide some of the extra scaffolding I&amp;#39;ve needed to get me going&lt;sup&gt;*&lt;/sup&gt;. I&amp;#39;m very close to getting the main requirements of the project done (I&amp;#39;ve just got a few bugs that still need squashing), but I&amp;#39;m still not at all comfortable with JQuery. I&amp;#39;m hoping to have some time left at the end of the precourse work to go back and do some more work with it. It looks like &lt;a href=&quot;http://www.theodinproject.com/javascript-and-jquery&quot;&gt;The Odin Project&lt;/a&gt; has a lot of good resources, and I found their site to be extremely helpful for learning HTML/CSS, so I&amp;#39;ll start there.&lt;/p&gt;

&lt;p&gt;I also want to take some time this weekend to try to style this here blog; given that the end of the school year is approaching and I still have new lessons and tests to write, projects to grade, and a room to clean out, we&amp;#39;ll see when that task actually gets done!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;*&lt;/sup&gt;Immediately after first posting this, one of my classmates shared a &lt;strong&gt;very&lt;/strong&gt; helpful article with me that allowed me to finish the basic requirements for the project in less than 5 minutes!&lt;/small&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 14 May 2015 00:00:00 -0700</pubDate>
        <link>http://hmfoster.github.io//Zone-of-Proximal-Development/</link>
        <guid isPermaLink="true">http://hmfoster.github.io//Zone-of-Proximal-Development/</guid>
      </item>
    
      <item>
        <title>On Tinkering, Day Dreaming, and Persevering</title>
        <description>&lt;p&gt;Over the last week or so, I&amp;#39;ve been moving at a fairly rapid pace through Hack Reactor&amp;#39;s precourse material. What I&amp;#39;m finding though, is that I&amp;#39;m spending a far greater amount of time learning related technologies and terminology (seem my last post) than I am actually solving the problems and reading through the material. I found this quite frustrating at first, but I&amp;#39;ve come to realize that this indirect learning is becoming more an more valuable. For one thing, its allowing me to accelerate my learning via transfer and adaptation. &lt;/p&gt;

&lt;p&gt;I have also found that while all of the reading, tutorials, etc... I did before beginning the precourse work is a helpful foundation, actually USING all of these tools is allowing me learn much more efficiently. This should come as no surprise, given that Bloom&amp;#39;s Hierarchy yadda yadda. As a result, I&amp;#39;ve decided to try to apply what I&amp;#39;m learning as much as possible outside of the precourse work. For example, I&amp;#39;ve switched from hosting my blog on WordPress.com, to using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and hosting through GitHub. This will force me to practice using the command line, writing HTML, CSS and Markdown, and using Git. &lt;/p&gt;

&lt;p&gt;Now, all of that being said, I have still been spending quite a bit of time on the actual precourse work. I read through HR&amp;#39;s presentation on closures and scoping rules and &lt;em&gt;thought&lt;/em&gt; that I understood it pretty well. However, when I then moved on to the second part of rewriting the library, I found these concepts to be quite a bit more difficult in practice. Fortunately, this forced me to actually &lt;strong&gt;use&lt;/strong&gt; the Chrome Developer&amp;#39;s tools. Even once I started using the debugger, I still got stuck on one of the functions for quite awhile. But then, on my walk home&lt;sup&gt;*&lt;/sup&gt;...EPIPHANY! Once I stopped fussy over the code in my computer and just thought about it while daydreaming, I realized I just needed to include an object in my code. Der. &lt;/p&gt;

&lt;p&gt;Got home, ate a snack, and popped open the laptop to put my theory to practice. And then IT STILL DIDN&amp;#39;T WORK. Fortunately (or not!), I &lt;em&gt;can&amp;#39;t&lt;/em&gt; let a good puzzle go unsolved, so I chose to keep at it and just have leftovers for dinner. I&amp;#39;m happy to say my perseverence paid off and I got the code working in time to watch one of my Wednesday night television. I originally thought I&amp;#39;d give myself a break today as a reward...but here I am, already itching to move on to the next problem. I guess that&amp;#39;s a good sign!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;*&lt;/sup&gt;I walk about a mile and a half home everyday after work&lt;/small&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 07 May 2015 00:00:00 -0700</pubDate>
        <link>http://hmfoster.github.io//Tinkering-Daydreaming/</link>
        <guid isPermaLink="true">http://hmfoster.github.io//Tinkering-Daydreaming/</guid>
      </item>
    
      <item>
        <title>Debugging the Debugger</title>
        <description>&lt;p&gt;Late last week I finally got into some completely novel concepts for me in the precourse work. The remaining Git ideas were fairly basic, but did describe the workflow HR expects us to follow). Not much interesting there. However, I then moved on to the section on Automated Testing, about which I had only had a vague understanding of the general idea before.&lt;/p&gt;

&lt;p&gt;In this section, I first read through a fairly brief reading introducing the idea of Automated Testing, which gave a few examples and introduced some of the key terminology and syntax. I honestly didn’t find this reading to be that helpful because it really only showed some example code without really explaining it, so I just skimmed through it to get the general idea. Next, I began working on the exercises provided by HR; these essentially introduce some foundational Javascript concepts using automated testing. I had no idea what I was supposed to be doing at first, but after ~15 minutes I figured it out and it was pretty smooth sailing from there. Unfortunately, for some reason two of the exercise sets seemingly “disappeared” from the testing file. I tried to fix up these exercises as best I could, but I was unable to get any feedback on them.&lt;/p&gt;

&lt;p&gt;Yesterday I worked through the resources provided to learn about Chrome’s debugging tools. I haven’t had a chance to implement any of them yet, but they look like they will be extremely useful. I had been using the console and a few other tools provided by Chrome, but I didn’t really know what I was doing or how to use these effectively. I will definitely want to review this section again (and probably again).&lt;/p&gt;

&lt;p&gt;Finally, yesterday afternoon I got to the section I’ve been most looking forward too — rewriting a Javascript library! I got a little sidetracked when beginning this task, because one of my classmates figured out a way to use the automated testing suite in Node.js instead of in the browser, giving more helpful error messages. I hit  few hiccups while setting this up for myself, so it took a bit longer than it would have if I were a more experienced programmer. For example, one of the things you need to set up is a pacakge.json file; I copy/pasted the content of this file, including an unnecessary comma that through some mysterious errors at first. If I’d had more exposure to JSON syntax, I probably would have caught this error a lot earlier than I did. Lesson learned!&lt;/p&gt;

&lt;p&gt;Writing the first few functions was a bit slow, primarily because I was still picking up on little nit-picky syntax requirements and figuring out my overall workflow. Now I’ve got a pretty good system worked out, and the latest function I rewrote only took me a few minutes. Basically, I write what I THINK the function should be, test it in the browser using the original testing file from HR, then test it in Node to get additional feedback. Then I’ll try it out in JSFiddle to tweak it until it works there, test it again in Node, and if that passes, double check it in the browser (this really isn’t necessary, but what can I say, I’m a perfectionist). I’ve also been committing all of this to a separate Git branch, so that I don’t get all of the Node files mixed into the master branch. Once I’m done, I’ll merge all of the changes to the file that contains the functions to the master branch, leaving out the Node files.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 May 2015 00:00:00 -0700</pubDate>
        <link>http://hmfoster.github.io//Automated-Testing-Underscore/</link>
        <guid isPermaLink="true">http://hmfoster.github.io//Automated-Testing-Underscore/</guid>
      </item>
    
      <item>
        <title>Reviewing</title>
        <description>&lt;p&gt;Since getting the HR precourse work on Monday, I’m happy to say I’ve been able to work through the first section fairly quickly. It involved a basic review of HTML, CSS, and Javascript, and I had actually already read all of the provided resources. Because I want to make sure I REALLY know this stuff, I still worked back through it all, recording particularly important/tricky points with Evernote to review yet again before my start date in late June. I believe I now have a strong understanding of all of the concepts I reviewed, but of course I will need to do a lot more practice–especially with CSS positioning!–before I really feel competent.&lt;/p&gt;

&lt;p&gt;I have now moved on to the section involving Git and using the command line. Again, most of this is review, but here HR has provided completely different resources than the ones I originally used. I’m especially enjoying the material on Git, as it provides review of pertinent terminal and git commands along with plenty of opportunities to practice them. I also like this resource more than the CodeSchool tutorial on Git, because this tutorial has you work on your own computer’s command line by creating a practice repo with which to work. For some reason this seems to help me retain the information better than when working on CodeSchool’s somewhat contrived exercises. One of my favorite exercises I’ve done so far has been to create command line and git aliases–these will definitely save some time!&lt;/p&gt;

&lt;p&gt;Now that I’ve gotten a good start on the precourse work, I think my general plan of attack has shifted somewhat; I want to try to work as quickly through the “easy” stuff as I can so that I have plenty of time to work through the more difficult tasks, such as the section on Recursion. Hopefully this strategy will allow me to better balance my time between work and HR, especially since the end of my school year coincides with the due dates for most of the sections.&lt;/p&gt;

&lt;p&gt;Speaking of, yesterday one of my students somehow found out that one of the other math teachers and I will not be coming back next year. I knew this would happen eventually because it is impossible to keep a secret at a small boarding school, so I was prepared to explain to them exactly why I was leaving. Even though they’re mostly juniors and seniors, as the retiring math teacher pointed out, they really can be just little kids at heart. They are currently convinced that he and I are the BEST TEACHERS EVER, and that no one that comes in next year could possibly be as good as us. Having worked with a great many other teachers, I have my doubts about this opinion, but of course the kids can’t see the forest for the trees right now. I suppose it’s good that they found out earlier rather than later, so they’ll have time to get comfortable with the idea before the end of the year.&lt;/p&gt;

&lt;p&gt;One valid concern they have is that since two of the three math teachers are leaving, they’re not sure who will be able to write their college math recommendations since only a few of them will have the remaining math teacher for calculus. Perhaps I will be able to write some recs for them next year, even if I’m no longer a teacher? Must ask the college counselor about this…&lt;/p&gt;
</description>
        <pubDate>Fri, 01 May 2015 00:00:00 -0700</pubDate>
        <link>http://hmfoster.github.io//Review-Work/</link>
        <guid isPermaLink="true">http://hmfoster.github.io//Review-Work/</guid>
      </item>
    
      <item>
        <title>HR Precourse Work Day 1</title>
        <description>&lt;p&gt;After weeks of anticipation, Hack Reactor has finally released the precourse work to my classmates and me. Before seeing the outline of the work, I was concerned that there would be many topics with which I have no familiarity. It looks like I’ve done a decent job prepping myself, however, as I have at least touched upon almost everything on the list.&lt;/p&gt;

&lt;p&gt;Everything you would expect to be there was (i.e. signing up for various services like GitHub, foundational Javascript and HTML/CSS concepts, how to use Git, etc…), but it is extremely helpful to have all of the resources laid out in a chronological list. One of the biggest things I’ve been struggling with while teaching myself how to program has been when, what, and where to study all of the necessary concepts; consequently, I found myself jumping from subject to subject a bit chaotically. Using CodeSchool definitely helped me develop a better strategy for tackling everything I had to learn, but it still wasn’t as well framed as the Hack Reactor work looks to be.&lt;/p&gt;

&lt;p&gt;The first real task on the list involved reading through a comprehensive set of slides on basic Javascript concepts. I already knew most of the information covered in these slides, but was pleasantly surprised to find little nuggets here and there that better cemented the reasoning behind various syntax rules. For example, the slides do an excellent job explaining the definitions, characteristics, and behaviors of different Javascript objects.&lt;/p&gt;

&lt;p&gt;I have also set-up a Trello board to help create a plan of attack so that I keep working through the various tasks in a reasonable amount of time. There are currently three major sections in the precourse work, and it looks like each section will take approximately the same amount of time. Therefore, I’ve got about 2 week to get through each section. I then took the first section and broke it down into and scheduled its subsections. This has made the mountain of work to get through much more manageable looking. Now I just have to remember to stay focused on my teaching load while at school, and leave my Hack Reactor work for home!&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Apr 2015 00:00:00 -0700</pubDate>
        <link>http://hmfoster.github.io//HR-Precourse-1/</link>
        <guid isPermaLink="true">http://hmfoster.github.io//HR-Precourse-1/</guid>
      </item>
    
  </channel>
</rss>